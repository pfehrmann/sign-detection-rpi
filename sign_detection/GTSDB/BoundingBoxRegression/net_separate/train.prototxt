input: "input"
layer {
  name: "l_input_train"
  type: "Python"
  top: "input_data"
  top: "label"
  phase: TRAIN
  python_param {
    module: 'sign_detection.GTSDB.BoundingBoxRegression.input_layer_activation'
    layer: 'InputLayerActivation'
    param_str: '{"file_input_net": "../ActivationMapBoundingBoxes/mini_net/deploy.prototxt", "file_input_weights": "../ActivationMapBoundingBoxes/mini_net/weights.caffemodel", "location_gt": "/home/leifb/Development/Data/GTSDB"}'
  }
}
layer {
    name: "l_conv"
    type: "Convolution"
    bottom: "input_data"
    top: "conv"
    convolution_param {
      num_output: 16     # learn 96 filters
      kernel_size: 6    # each filter is 11x11
      stride: 1          # step 4 pixels between each filter application
      pad: 4
      weight_filler {
        type: "gaussian" # initialize the filters from a Gaussian
        std: 0.02        # distribution with stdev 0.01 (default mean: 0)
      }
      bias_filler {
        type: "constant" # initialize the biases to zero (0)
        value: 0
      }
    }
}
layer {
    name: "l_spp"
    type: "SPP"
    bottom: "conv"
    top: "spp"
    spp_param {
        pool: MAX
        pyramid_height: 2
    }
}
layer {
  name: "l_ip1"
  type: "InnerProduct"
  bottom: "spp"
  top: "ip1"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.02
    }
  }
}
layer {
  name: "l_ip2"
  type: "InnerProduct"
  bottom: "ip1"
  top: "ip2"
  inner_product_param {
    num_output: 1000
    weight_filler {
      type: "gaussian"
      std: 0.02
    }
  }
}
layer {
  name: "l_ip3"
  type: "InnerProduct"
  bottom: "ip2"
  top: "ip3"
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "gaussian"
      std: 0.02
    }
  }
}
layer {
    name: "l_loss"
    type: "SigmoidCrossEntropyLoss"
    phase: TRAIN
    bottom: "ip3"
    bottom: "label"
}